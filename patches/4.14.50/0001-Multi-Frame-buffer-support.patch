From 15a4c6568db9afb69a329a1b40c1d06b553fdef2 Mon Sep 17 00:00:00 2001
From: James Hughes <james.hughes@raspberrypi.org>
Date: Mon, 26 Mar 2018 13:33:04 +0100
Subject: [PATCH] Multi Frame buffer support

Supports multiple frame buffers if the firmware has the
required support. Should work as before if the firmware
is too old.
---
 drivers/video/fbdev/bcm2708_fb.c           | 496 ++++++++++++++-------
 include/soc/bcm2835/raspberrypi-firmware.h |  10 +
 2 files changed, 352 insertions(+), 154 deletions(-)

diff --git a/drivers/video/fbdev/bcm2708_fb.c b/drivers/video/fbdev/bcm2708_fb.c
index 6c9ee9ca8ee2..9d7def02f51b 100644
--- a/drivers/video/fbdev/bcm2708_fb.c
+++ b/drivers/video/fbdev/bcm2708_fb.c
@@ -2,6 +2,7 @@
  *  linux/drivers/video/bcm2708_fb.c
  *
  * Copyright (C) 2010 Broadcom
+ * Copyright (C) 2018 Raspberry Pi (Trading) Ltd
  *
  * This file is subject to the terms and conditions of the GNU General Public
  * License.  See the file COPYING in the main directory of this archive
@@ -13,6 +14,7 @@
  * Copyright 1999-2001 Jeff Garzik <jgarzik@pobox.com>
  *
  */
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/errno.h>
@@ -40,6 +42,7 @@
 //#define BCM2708_FB_DEBUG
 #define MODULE_NAME "bcm2708_fb"
 
+
 #ifdef BCM2708_FB_DEBUG
 #define print_debug(fmt, ...) pr_debug("%s:%s:%d: "fmt, \
 			MODULE_NAME, __func__, __LINE__, ##__VA_ARGS__)
@@ -82,62 +85,130 @@ struct bcm2708_fb_stats {
 	u32 dma_irqs;
 };
 
+struct vc4_display_settings_t {
+	u32 display_num;
+	u32 width;
+	u32 height;
+	u32 pitch;
+	u32 depth;
+	u32 virtual_width;
+	u32 virtual_height;
+	u32 virtual_width_offset;
+	u32 virtual_height_offset;
+	unsigned long fb_bus_address;
+};
+
+/* One static instance of the DMA parameters, since they are used by all
+ * bcm FB's
+ */
+static int dma_chan;
+static int dma_irq;
+static void __iomem *dma_chan_base;
+static wait_queue_head_t dma_waitq;
+static struct bcm2708_fb_stats dma_stats;
+static void *cb_base;	/* DMA control blocks */
+static dma_addr_t cb_handle;
+
+/* Reference count of number of FB's created. Needed so we can remove
+ * debugfs root on last FB remove
+ */
+static int instance_count;
+
 struct bcm2708_fb {
 	struct fb_info fb;
 	struct platform_device *dev;
 	struct rpi_firmware *fw;
 	u32 cmap[16];
 	u32 gpu_cmap[256];
-	int dma_chan;
-	int dma_irq;
-	void __iomem *dma_chan_base;
-	void *cb_base;		/* DMA control blocks */
-	dma_addr_t cb_handle;
 	struct dentry *debugfs_dir;
-	wait_queue_head_t dma_waitq;
-	struct bcm2708_fb_stats stats;
+	struct dentry *debugfs_subdir;
 	unsigned long fb_bus_address;
 	struct { u32 base, length; } gpu;
+	struct vc4_display_settings_t display_settings;
+	struct debugfs_regset32 screeninfo_regset;
 };
 
 #define to_bcm2708(info)	container_of(info, struct bcm2708_fb, fb)
 
 static void bcm2708_fb_debugfs_deinit(struct bcm2708_fb *fb)
 {
-	debugfs_remove_recursive(fb->debugfs_dir);
-	fb->debugfs_dir = NULL;
+	debugfs_remove_recursive(fb->debugfs_subdir);
+	fb->debugfs_subdir = NULL;
+
+	instance_count--;
+
+	if (!instance_count) {
+		debugfs_remove_recursive(fb->debugfs_dir);
+		fb->debugfs_dir = NULL;
+	}
 }
 
 static int bcm2708_fb_debugfs_init(struct bcm2708_fb *fb)
 {
+char buf[3];
+
 	static struct debugfs_reg32 stats_registers[] = {
-		{
-			"dma_copies",
-			offsetof(struct bcm2708_fb_stats, dma_copies)
-		},
-		{
-			"dma_irqs",
-			offsetof(struct bcm2708_fb_stats, dma_irqs)
-		},
+	{"dma_copies", offsetof(struct bcm2708_fb_stats, dma_copies)},
+	{"dma_irqs",   offsetof(struct bcm2708_fb_stats, dma_irqs)},
+	};
+
+	static struct debugfs_reg32 screeninfo[] = {
+	{"width",	 offsetof(struct fb_var_screeninfo, xres)},
+	{"height",	 offsetof(struct fb_var_screeninfo, yres)},
+	{"bpp",		 offsetof(struct fb_var_screeninfo, bits_per_pixel)},
+	{"xres_virtual", offsetof(struct fb_var_screeninfo, xres_virtual)},
+	{"yres_virtual", offsetof(struct fb_var_screeninfo, yres_virtual)},
+	{"xoffset",	 offsetof(struct fb_var_screeninfo, xoffset)},
+	{"yoffset",	 offsetof(struct fb_var_screeninfo, yoffset)},
 	};
 
-	fb->debugfs_dir = debugfs_create_dir(DRIVER_NAME, NULL);
+	fb->debugfs_dir = debugfs_lookup(DRIVER_NAME, NULL);
+
+	if (!fb->debugfs_dir)
+		fb->debugfs_dir = debugfs_create_dir(DRIVER_NAME, NULL);
+
 	if (!fb->debugfs_dir) {
-		pr_warn("%s: could not create debugfs entry\n",
+		dev_warn(fb->fb.dev, "%s: could not create debugfs folder\n",
 			__func__);
 		return -EFAULT;
 	}
 
-	fb->stats.regset.regs = stats_registers;
-	fb->stats.regset.nregs = ARRAY_SIZE(stats_registers);
-	fb->stats.regset.base = &fb->stats;
+	snprintf(buf, sizeof(buf), "%d", fb->display_settings.display_num);
+
+	fb->debugfs_subdir = debugfs_create_dir(buf, fb->debugfs_dir);
+
+	if (!fb->debugfs_subdir) {
+		dev_warn(fb->fb.dev, "%s: could not create debugfs entry %d\n",
+			__func__, fb->display_settings.display_num);
+		return -EFAULT;
+	}
+
+	dma_stats.regset.regs = stats_registers;
+	dma_stats.regset.nregs = ARRAY_SIZE(stats_registers);
+	dma_stats.regset.base = &dma_stats;
+
+	if (!debugfs_create_regset32(
+		"dma_stats", 0444, fb->debugfs_subdir, &dma_stats.regset)) {
+		dev_warn(fb->fb.dev, "%s: could not create statistics registers\n",
+			__func__);
+		goto fail;
+	}
+
+	fb->screeninfo_regset.regs = screeninfo;
+	fb->screeninfo_regset.nregs = ARRAY_SIZE(screeninfo);
+	fb->screeninfo_regset.base = &fb->fb.var;
 
 	if (!debugfs_create_regset32(
-		"stats", 0444, fb->debugfs_dir, &fb->stats.regset)) {
-		pr_warn("%s: could not create statistics registers\n",
+		"screeninfo", 0444, fb->debugfs_subdir,
+		&fb->screeninfo_regset)) {
+		dev_warn(fb->fb.dev,
+			"%s: could not create dimensions registers\n",
 			__func__);
 		goto fail;
 	}
+
+	instance_count++;
+
 	return 0;
 
 fail:
@@ -270,14 +341,16 @@ static int bcm2708_fb_check_var(struct fb_var_screeninfo *var,
 
 static int bcm2708_fb_set_par(struct fb_info *info)
 {
+	static int old_firmware;
+
 	struct bcm2708_fb *fb = to_bcm2708(info);
 	struct fb_alloc_tags fbinfo = {
 		.tag1 = { RPI_FIRMWARE_FRAMEBUFFER_SET_PHYSICAL_WIDTH_HEIGHT,
-			  8, 0, },
+			8, 0, },
 			.xres = info->var.xres,
 			.yres = info->var.yres,
 		.tag2 = { RPI_FIRMWARE_FRAMEBUFFER_SET_VIRTUAL_WIDTH_HEIGHT,
-			  8, 0, },
+			8, 0, },
 			.xres_virtual = info->var.xres_virtual,
 			.yres_virtual = info->var.yres_virtual,
 		.tag3 = { RPI_FIRMWARE_FRAMEBUFFER_SET_DEPTH, 4, 0 },
@@ -292,11 +365,26 @@ static int bcm2708_fb_set_par(struct fb_info *info)
 			.pitch = 0,
 	};
 	int ret;
+	u32 value = fb->display_settings.display_num;
 
-	print_debug("%s(%p) %dx%d (%dx%d), %d, %d\n", __func__, info,
+	print_debug("%s(%p) %dx%d (%dx%d), %d, %d (display %d)\n", __func__, info,
 		info->var.xres, info->var.yres, info->var.xres_virtual,
 		info->var.yres_virtual, (int)info->screen_size,
-		info->var.bits_per_pixel);
+		info->var.bits_per_pixel, value);
+
+	/* Need to set the display number to act on first
+	 * Cannot do it in the tag list because on older firmware the call
+	 * will fail and stop the rest of the list being executed.
+	 * We can ignore this call failing as the default at other end is 0
+	 * Dont make the call if we suspect old firmware (ie call failed before)
+	 */
+	if (!old_firmware && rpi_firmware_property(fb->fw,
+				RPI_FIRMWARE_FRAMEBUFFER_SET_DISPLAY_NUM,
+				&value, sizeof(value)))	{
+		dev_warn_once(info->device,
+			"Set display number call failed. Old GPU firmware?");
+		old_firmware = 1;
+	}
 
 	ret = rpi_firmware_property_list(fb->fw, &fbinfo, sizeof(fbinfo));
 	if (ret) {
@@ -356,8 +444,8 @@ static int bcm2708_fb_setcolreg(unsigned int regno, unsigned int red,
 		if (regno < 256) {
 			/* blue [23:16], green [15:8], red [7:0] */
 			fb->gpu_cmap[regno] = ((red   >> 8) & 0xff) << 0 |
-					      ((green >> 8) & 0xff) << 8 |
-					      ((blue  >> 8) & 0xff) << 16;
+					((green >> 8) & 0xff) << 8 |
+					((blue  >> 8) & 0xff) << 16;
 		}
 		/* Hack: we need to tell GPU the palette has changed, but
 		 * currently bcm2708_fb_set_par takes noticeable time when
@@ -372,6 +460,7 @@ static int bcm2708_fb_setcolreg(unsigned int regno, unsigned int red,
 				u32 cmap[256];
 			} *packet;
 			int ret;
+			u32 dispnum = fb->display_settings.display_num;
 
 			packet = kmalloc(sizeof(*packet), GFP_KERNEL);
 			if (!packet)
@@ -380,6 +469,14 @@ static int bcm2708_fb_setcolreg(unsigned int regno, unsigned int red,
 			packet->length = regno + 1;
 			memcpy(packet->cmap, fb->gpu_cmap,
 				sizeof(packet->cmap));
+
+			if (rpi_firmware_property(fb->fw,
+						RPI_FIRMWARE_FRAMEBUFFER_SET_DISPLAY_NUM,
+						&dispnum, sizeof(dispnum)))	{
+				dev_warn_once(info->device,
+					"Set display number call failed. Old GPU firmware?");
+			}
+
 			ret = rpi_firmware_property(fb->fw,
 					RPI_FIRMWARE_FRAMEBUFFER_SET_PALETTE,
 					packet,
@@ -404,6 +501,7 @@ static int bcm2708_fb_blank(int blank_mode, struct fb_info *info)
 	struct bcm2708_fb *fb = to_bcm2708(info);
 	u32 value;
 	int ret;
+	u32 dispnum = fb->display_settings.display_num;
 
 	switch (blank_mode) {
 	case FB_BLANK_UNBLANK:
@@ -419,8 +517,16 @@ static int bcm2708_fb_blank(int blank_mode, struct fb_info *info)
 		return -EINVAL;
 	}
 
+	if (rpi_firmware_property(fb->fw,
+				RPI_FIRMWARE_FRAMEBUFFER_SET_DISPLAY_NUM,
+				&dispnum, sizeof(dispnum))) {
+		dev_warn_once(info->device,
+			"Set display number call failed. Old GPU firmware?");
+	}
+
 	ret = rpi_firmware_property(fb->fw, RPI_FIRMWARE_FRAMEBUFFER_BLANK,
-				    &value, sizeof(value));
+				&value, sizeof(value));
+
 	if (ret)
 		dev_err(info->device, "%s(%d) failed: %d\n", __func__,
 			blank_mode, ret);
@@ -445,12 +551,12 @@ static int bcm2708_fb_pan_display(struct fb_var_screeninfo *var,
 static void dma_memcpy(struct bcm2708_fb *fb, dma_addr_t dst, dma_addr_t src,
 		       int size)
 {
-	int burst_size = (fb->dma_chan == 0) ? 8 : 2;
-	struct bcm2708_dma_cb *cb = fb->cb_base;
+	struct bcm2708_dma_cb *cb = cb_base;
+	int burst_size = (dma_chan == 0) ? 8 : 2;
 
 	cb->info = BCM2708_DMA_BURST(burst_size) | BCM2708_DMA_S_WIDTH |
-		   BCM2708_DMA_S_INC | BCM2708_DMA_D_WIDTH |
-		   BCM2708_DMA_D_INC;
+		BCM2708_DMA_S_INC | BCM2708_DMA_D_WIDTH |
+		BCM2708_DMA_D_INC;
 	cb->dst = dst;
 	cb->src = src;
 	cb->length = size;
@@ -459,22 +565,29 @@ static void dma_memcpy(struct bcm2708_fb *fb, dma_addr_t dst, dma_addr_t src,
 	cb->pad[1] = 0;
 	cb->next = 0;
 
+	/* Wait for DMA to become free in case being used by another FB. */
+	while (bcm_dma_is_busy(dma_chan_base)) {
+		wait_event_interruptible(
+			dma_waitq,
+			!bcm_dma_is_busy(dma_chan_base));
+	}
+
 	if (size < dma_busy_wait_threshold) {
-		bcm_dma_start(fb->dma_chan_base, fb->cb_handle);
-		bcm_dma_wait_idle(fb->dma_chan_base);
+		bcm_dma_start(dma_chan_base, cb_handle);
+		bcm_dma_wait_idle(dma_chan_base);
 	} else {
-		void __iomem *dma_chan = fb->dma_chan_base;
+		void __iomem *local_dma_chan = dma_chan_base;
 
 		cb->info |= BCM2708_DMA_INT_EN;
-		bcm_dma_start(fb->dma_chan_base, fb->cb_handle);
-		while (bcm_dma_is_busy(dma_chan)) {
+		bcm_dma_start(dma_chan_base, cb_handle);
+		while (bcm_dma_is_busy(local_dma_chan)) {
 			wait_event_interruptible(
-				fb->dma_waitq,
-				!bcm_dma_is_busy(dma_chan));
+				dma_waitq,
+				!bcm_dma_is_busy(local_dma_chan));
 		}
-		fb->stats.dma_irqs++;
+		dma_stats.dma_irqs++;
 	}
-	fb->stats.dma_copies++;
+	dma_stats.dma_copies++;
 }
 
 /* address with no aliases */
@@ -500,7 +613,7 @@ static long vc_mem_copy(struct bcm2708_fb *fb, unsigned long arg)
 	/* Get the parameter data.
 	 */
 	if (copy_from_user
-	    (&ioparam, (void *)arg, sizeof(ioparam)) != 0) {
+	(&ioparam, (void *)arg, sizeof(ioparam)) != 0) {
 		pr_err("[%s]: failed to copy-from-user\n",
 				__func__);
 		rc = -EFAULT;
@@ -522,7 +635,7 @@ static long vc_mem_copy(struct bcm2708_fb *fb, unsigned long arg)
 	}
 
 	buf = dma_alloc_coherent(fb->fb.device, PAGE_ALIGN(size), &bus_addr,
-				 GFP_ATOMIC);
+				GFP_ATOMIC);
 	if (!buf) {
 		pr_err("[%s]: failed to dma_alloc_coherent(%d)\n",
 				__func__, size);
@@ -558,13 +671,23 @@ static int bcm2708_ioctl(struct fb_info *info, unsigned int cmd,
 	struct bcm2708_fb *fb = to_bcm2708(info);
 	u32 dummy = 0;
 	int ret;
+	u32 dispnum = fb->display_settings.display_num;
 
 	switch (cmd) {
 	case FBIO_WAITFORVSYNC:
+	{
+		if (rpi_firmware_property(fb->fw,
+					RPI_FIRMWARE_FRAMEBUFFER_SET_DISPLAY_NUM,
+					&dispnum , sizeof(dispnum ))) {
+			dev_warn_once(info->device,
+				"Set display number call failed. Old GPU firmware?");
+		}
+
 		ret = rpi_firmware_property(fb->fw,
-					    RPI_FIRMWARE_FRAMEBUFFER_SET_VSYNC,
-					    &dummy, sizeof(dummy));
+					RPI_FIRMWARE_FRAMEBUFFER_SET_VSYNC,
+					&dummy, sizeof(dummy));
 		break;
+	}
 	case FBIODMACOPY:
 		ret = vc_mem_copy(fb, arg);
 		break;
@@ -581,23 +704,22 @@ static int bcm2708_ioctl(struct fb_info *info, unsigned int cmd,
 static void bcm2708_fb_fillrect(struct fb_info *info,
 				const struct fb_fillrect *rect)
 {
-	/* (is called) print_debug("bcm2708_fb_fillrect\n"); */
 	cfb_fillrect(info, rect);
 }
 
 /* A helper function for configuring dma control block */
 static void set_dma_cb(struct bcm2708_dma_cb *cb,
-		       int        burst_size,
-		       dma_addr_t dst,
-		       int        dst_stride,
-		       dma_addr_t src,
-		       int        src_stride,
-		       int        w,
-		       int        h)
+		int        burst_size,
+		dma_addr_t dst,
+		int        dst_stride,
+		dma_addr_t src,
+		int        src_stride,
+		int        w,
+		int        h)
 {
 	cb->info = BCM2708_DMA_BURST(burst_size) | BCM2708_DMA_S_WIDTH |
-		   BCM2708_DMA_S_INC | BCM2708_DMA_D_WIDTH |
-		   BCM2708_DMA_D_INC | BCM2708_DMA_TDMODE;
+		BCM2708_DMA_S_INC | BCM2708_DMA_D_WIDTH |
+		BCM2708_DMA_D_INC | BCM2708_DMA_TDMODE;
 	cb->dst = dst;
 	cb->src = src;
 	/*
@@ -615,15 +737,18 @@ static void bcm2708_fb_copyarea(struct fb_info *info,
 				const struct fb_copyarea *region)
 {
 	struct bcm2708_fb *fb = to_bcm2708(info);
-	struct bcm2708_dma_cb *cb = fb->cb_base;
+	struct bcm2708_dma_cb *cb = cb_base;
 	int bytes_per_pixel = (info->var.bits_per_pixel + 7) >> 3;
 
 	/* Channel 0 supports larger bursts and is a bit faster */
-	int burst_size = (fb->dma_chan == 0) ? 8 : 2;
+	int burst_size = (dma_chan == 0) ? 8 : 2;
 	int pixels = region->width * region->height;
 
-	/* Fallback to cfb_copyarea() if we don't like something */
-	if (bytes_per_pixel > 4 ||
+	/* If DMA is currently in use (ie being used on another FB), then
+	 * rather than wait for it to finish, just use the cfb_copyarea
+	 */
+	if (bcm_dma_is_busy(dma_chan_base) ||
+	    bytes_per_pixel > 4 ||
 	    info->var.xres * info->var.yres > 1920 * 1200 ||
 	    region->width <= 0 || region->width > info->var.xres ||
 	    region->height <= 0 || region->height > info->var.yres ||
@@ -635,6 +760,7 @@ static void bcm2708_fb_copyarea(struct fb_info *info,
 	    region->dx + region->width > info->var.xres ||
 	    region->sy + region->height > info->var.yres ||
 	    region->dy + region->height > info->var.yres) {
+
 		cfb_copyarea(info, region);
 		return;
 	}
@@ -650,8 +776,8 @@ static void bcm2708_fb_copyarea(struct fb_info *info,
 		 * 1920x1200 resolution at 32bpp pixel depth.
 		 */
 		int y;
-		dma_addr_t control_block_pa = fb->cb_handle;
-		dma_addr_t scratchbuf = fb->cb_handle + 16 * 1024;
+		dma_addr_t control_block_pa = cb_handle;
+		dma_addr_t scratchbuf = cb_handle + 16 * 1024;
 		int scanline_size = bytes_per_pixel * region->width;
 		int scanlines_per_cb = (64 * 1024 - 16 * 1024) / scanline_size;
 
@@ -669,15 +795,15 @@ static void bcm2708_fb_copyarea(struct fb_info *info,
 				scanlines_per_cb = region->height - y;
 
 			set_dma_cb(cb, burst_size, scratchbuf, scanline_size,
-				   src, fb->fb.fix.line_length,
-				   scanline_size, scanlines_per_cb);
+				src, fb->fb.fix.line_length,
+				scanline_size, scanlines_per_cb);
 			control_block_pa += sizeof(struct bcm2708_dma_cb);
 			cb->next = control_block_pa;
 			cb++;
 
 			set_dma_cb(cb, burst_size, dst, fb->fb.fix.line_length,
-				   scratchbuf, scanline_size,
-				   scanline_size, scanlines_per_cb);
+				scratchbuf, scanline_size,
+				scanline_size, scanlines_per_cb);
 			control_block_pa += sizeof(struct bcm2708_dma_cb);
 			cb->next = control_block_pa;
 			cb++;
@@ -700,48 +826,46 @@ static void bcm2708_fb_copyarea(struct fb_info *info,
 			stride = -fb->fb.fix.line_length;
 		}
 		set_dma_cb(cb, burst_size,
-			   fb->fb_bus_address + dy * fb->fb.fix.line_length +
-						   bytes_per_pixel * region->dx,
-			   stride,
-			   fb->fb_bus_address + sy * fb->fb.fix.line_length +
-						   bytes_per_pixel * region->sx,
-			   stride,
-			   region->width * bytes_per_pixel,
-			   region->height);
+			fb->fb_bus_address + dy * fb->fb.fix.line_length +
+						bytes_per_pixel * region->dx,
+			stride,
+			fb->fb_bus_address + sy * fb->fb.fix.line_length +
+						bytes_per_pixel * region->sx,
+			stride,
+			region->width * bytes_per_pixel,
+			region->height);
 	}
 
 	/* end of dma control blocks chain */
 	cb->next = 0;
 
-
 	if (pixels < dma_busy_wait_threshold) {
-		bcm_dma_start(fb->dma_chan_base, fb->cb_handle);
-		bcm_dma_wait_idle(fb->dma_chan_base);
+		bcm_dma_start(dma_chan_base, cb_handle);
+		bcm_dma_wait_idle(dma_chan_base);
 	} else {
-		void __iomem *dma_chan = fb->dma_chan_base;
+		void __iomem *local_dma_chan = dma_chan_base;
 
 		cb->info |= BCM2708_DMA_INT_EN;
-		bcm_dma_start(fb->dma_chan_base, fb->cb_handle);
-		while (bcm_dma_is_busy(dma_chan)) {
+		bcm_dma_start(dma_chan_base, cb_handle);
+		while (bcm_dma_is_busy(local_dma_chan)) {
 			wait_event_interruptible(
-				fb->dma_waitq,
-				!bcm_dma_is_busy(dma_chan));
+				dma_waitq,
+				!bcm_dma_is_busy(local_dma_chan));
 		}
-		fb->stats.dma_irqs++;
+		dma_stats.dma_irqs++;
 	}
-	fb->stats.dma_copies++;
+	dma_stats.dma_copies++;
 }
 
 static void bcm2708_fb_imageblit(struct fb_info *info,
-				 const struct fb_image *image)
+				const struct fb_image *image)
 {
-	/* (is called) print_debug("bcm2708_fb_imageblit\n"); */
 	cfb_imageblit(info, image);
 }
 
 static irqreturn_t bcm2708_fb_dma_irq(int irq, void *cxt)
 {
-	struct bcm2708_fb *fb = cxt;
+//	struct bcm2708_fb *fb = cxt;
 
 	/* FIXME: should read status register to check if this is
 	 * actually interrupting us or not, in case this interrupt
@@ -751,9 +875,9 @@ static irqreturn_t bcm2708_fb_dma_irq(int irq, void *cxt)
 	 */
 
 	/* acknowledge the interrupt */
-	writel(BCM2708_DMA_INT, fb->dma_chan_base + BCM2708_DMA_CS);
+	writel(BCM2708_DMA_INT, dma_chan_base + BCM2708_DMA_CS);
 
-	wake_up(&fb->dma_waitq);
+	wake_up(&dma_waitq);
 	return IRQ_HANDLED;
 }
 
@@ -786,11 +910,23 @@ static int bcm2708_fb_register(struct bcm2708_fb *fb)
 	fb->fb.fix.ywrapstep = 0;
 	fb->fb.fix.accel = FB_ACCEL_NONE;
 
-	fb->fb.var.xres = fbwidth;
-	fb->fb.var.yres = fbheight;
-	fb->fb.var.xres_virtual = fbwidth;
-	fb->fb.var.yres_virtual = fbheight;
-	fb->fb.var.bits_per_pixel = fbdepth;
+	/* If we have data from the VC4 on FB's, use that, otherwise use the
+	 * module parameters
+	 */
+	if (fb->display_settings.width) {
+		fb->fb.var.xres = fb->display_settings.width;
+		fb->fb.var.yres = fb->display_settings.height;
+		fb->fb.var.xres_virtual = fb->fb.var.xres;
+		fb->fb.var.yres_virtual = fb->fb.var.yres;
+		fb->fb.var.bits_per_pixel = fb->display_settings.depth;
+	} else {
+		fb->fb.var.xres = fbwidth;
+		fb->fb.var.yres = fbheight;
+		fb->fb.var.xres_virtual = fbwidth;
+		fb->fb.var.yres_virtual = fbheight;
+		fb->fb.var.bits_per_pixel = fbdepth;
+	}
+
 	fb->fb.var.vmode = FB_VMODE_NONINTERLACED;
 	fb->fb.var.activate = FB_ACTIVATE_NOW;
 	fb->fb.var.nonstd = 0;
@@ -806,26 +942,31 @@ static int bcm2708_fb_register(struct bcm2708_fb *fb)
 	fb->fb.monspecs.dclkmax = 100000000;
 
 	bcm2708_fb_set_bitfields(&fb->fb.var);
-	init_waitqueue_head(&fb->dma_waitq);
+	init_waitqueue_head(&dma_waitq);
 
 	/*
 	 * Allocate colourmap.
 	 */
-
 	fb_set_var(&fb->fb, &fb->fb.var);
+
 	ret = bcm2708_fb_set_par(&fb->fb);
+
 	if (ret)
 		return ret;
 
-	print_debug("BCM2708FB: registering framebuffer (%dx%d@%d) (%d)\n",
-		fbwidth, fbheight, fbdepth, fbswap);
+	print_debug("BCM2708FB: registering framebuffer for display %d (%dx%d@%d) (swap R/B%d)\n",
+		    fb->display_settings.display_num,
+		    fb->fb.var.xres,
+		    fb->fb.var.yres,
+		    fb->fb.var.bits_per_pixel,
+		    fbswap);
 
 	ret = register_framebuffer(&fb->fb);
-	print_debug("BCM2708FB: register framebuffer (%d)\n", ret);
+
 	if (ret == 0)
 		goto out;
 
-	print_debug("BCM2708FB: cannot register framebuffer (%d)\n", ret);
+	dev_warn(fb->fb.dev, "Unable to register framebuffer (%d)\n", ret);
 out:
 	return ret;
 }
@@ -835,7 +976,8 @@ static int bcm2708_fb_probe(struct platform_device *dev)
 	struct device_node *fw_np;
 	struct rpi_firmware *fw;
 	struct bcm2708_fb *fb;
-	int ret;
+	int ret, i, old = 0;
+	u32 num_displays;
 
 	fw_np = of_parse_phandle(dev->dev.of_node, "firmware", 0);
 /* Remove comment when booting without Device Tree is no longer supported
@@ -848,70 +990,116 @@ static int bcm2708_fb_probe(struct platform_device *dev)
 	if (!fw)
 		return -EPROBE_DEFER;
 
-	fb = kzalloc(sizeof(struct bcm2708_fb), GFP_KERNEL);
-	if (!fb) {
-		ret = -ENOMEM;
-		goto free_region;
+	ret = rpi_firmware_property(fw,
+			RPI_FIRMWARE_FRAMEBUFFER_GET_NUM_DISPLAYS,
+			&num_displays, sizeof(u32));
+
+	/* If we fail to get the number of displays, or it returns 0, then
+	 * assume old firmware that doesnt have the mailbox call, so just
+	 * just set one display
+	 */
+	if (ret || num_displays == 0) {
+		num_displays = 1;
+		old = 1;
+		dev_err(&dev->dev,
+			"Unable to determine number of FB's. Assuming 1\n");
+		print_debug("Unable to determine number of FB's. Assuming 1\n");
+		ret = 0;
 	}
 
-	fb->fw = fw;
-	bcm2708_fb_debugfs_init(fb);
+	/* Set up the DMA information. Note we have just one set of DMA for
+	 * all the FB's, and simply ensure that the DMA only gets called
+	 * by one at a time
+	 */
+	if (!cb_base) {
+		cb_base = dma_alloc_writecombine(&dev->dev, SZ_64K,
+					&cb_handle, GFP_KERNEL);
+		if (!cb_base) {
+			dev_err(&dev->dev, "cannot allocate DMA CBs\n");
+			ret = -ENOMEM;
+			goto free_fb;
+		}
+
+		dev_info(&dev->dev,
+			"allocated DMA memory %08x\n",
+			cb_handle);
 
-	fb->cb_base = dma_alloc_writecombine(&dev->dev, SZ_64K,
-					     &fb->cb_handle, GFP_KERNEL);
-	if (!fb->cb_base) {
-		dev_err(&dev->dev, "cannot allocate DMA CBs\n");
-		ret = -ENOMEM;
-		goto free_fb;
+		ret = bcm_dma_chan_alloc(BCM_DMA_FEATURE_BULK,
+					 &dma_chan_base, &dma_irq);
+		if (ret < 0) {
+			dev_err(&dev->dev, "couldn't allocate a DMA channel\n");
+			goto free_cb;
+		}
+		dma_chan = ret;
+
+		ret = request_irq(dma_irq, bcm2708_fb_dma_irq,
+				  0, "bcm2708_fb dma", fb);
+		if (ret) {
+			dev_err(&dev->dev,
+				"failed to request DMA irq\n");
+			goto free_dma_chan;
+		}
+		dev_info(&dev->dev,
+			"allocated DMA channel %d @ %p\n",
+			dma_chan, dma_chan_base);
 	}
 
-	pr_info("BCM2708FB: allocated DMA memory %08x\n",
-	       fb->cb_handle);
+	for (i = 0; i < num_displays && ret == 0; i++) {
+		fb = kzalloc(sizeof(struct bcm2708_fb), GFP_KERNEL);
 
-	ret = bcm_dma_chan_alloc(BCM_DMA_FEATURE_BULK,
-				 &fb->dma_chan_base, &fb->dma_irq);
-	if (ret < 0) {
-		dev_err(&dev->dev, "couldn't allocate a DMA channel\n");
-		goto free_cb;
-	}
-	fb->dma_chan = ret;
+		if (!fb) {
+			ret = -ENOMEM;
+			goto free_region;
+		}
 
-	ret = request_irq(fb->dma_irq, bcm2708_fb_dma_irq,
-			  0, "bcm2708_fb dma", fb);
-	if (ret) {
-		pr_err("%s: failed to request DMA irq\n", __func__);
-		goto free_dma_chan;
-	}
+		fb->fw = fw;
+		fb->display_settings.display_num = i;
 
+		bcm2708_fb_debugfs_init(fb);
 
-	pr_info("BCM2708FB: allocated DMA channel %d @ %p\n",
-	       fb->dma_chan, fb->dma_chan_base);
+		fb->dev = dev;
+		fb->fb.device = &dev->dev;
+		/* failure here isn't fatal, but we'll fail in vc_mem_copy
+		 * if fb->gpu is not valid
+		 */
+		rpi_firmware_property(fb->fw,
+				RPI_FIRMWARE_GET_VC_MEMORY,
+				&fb->gpu, sizeof(fb->gpu));
 
-	fb->dev = dev;
-	fb->fb.device = &dev->dev;
+		if (old) {
+			memset(&fb->display_settings, 0,
+				sizeof(fb->display_settings));
+		} else {
+			fb->display_settings.display_num = i;
+			ret = rpi_firmware_property(fb->fw,
+				RPI_FIRMWARE_FRAMEBUFFER_GET_DISPLAY_SETTINGS,
+				&fb->display_settings,
+				GET_DISPLAY_SETTINGS_PAYLOAD_SIZE);
+		}
 
-	/* failure here isn't fatal, but we'll fail in vc_mem_copy if
-	 * fb->gpu is not valid
-	 */
-	rpi_firmware_property(fb->fw,
-				    RPI_FIRMWARE_GET_VC_MEMORY,
-				    &fb->gpu, sizeof(fb->gpu));
+		ret = bcm2708_fb_register(fb);
 
-	ret = bcm2708_fb_register(fb);
-	if (ret == 0) {
-		platform_set_drvdata(dev, fb);
-		goto out;
+		if (ret == 0) {
+			platform_set_drvdata(dev, fb);
+			print_debug("Registered framebuffer for display %d, size %d,%d\n",
+					fb->display_settings.display_num,
+					fb->fb.var.xres,
+					fb->fb.var.yres);
+		} else
+			goto free_dma_chan; // TODO. Better cleanup
 	}
 
+	return ret;
+
 free_dma_chan:
-	bcm_dma_chan_free(fb->dma_chan);
+	bcm_dma_chan_free(dma_chan);
 free_cb:
-	dma_free_writecombine(&dev->dev, SZ_64K, fb->cb_base, fb->cb_handle);
+	dma_free_writecombine(&dev->dev, SZ_64K, cb_base, cb_handle);
 free_fb:
 	kfree(fb);
 free_region:
 	dev_err(&dev->dev, "probe failed, err %d\n", ret);
-out:
+
 	return ret;
 }
 
@@ -925,12 +1113,12 @@ static int bcm2708_fb_remove(struct platform_device *dev)
 		iounmap(fb->fb.screen_base);
 	unregister_framebuffer(&fb->fb);
 
-	dma_free_writecombine(&dev->dev, SZ_64K, fb->cb_base, fb->cb_handle);
-	bcm_dma_chan_free(fb->dma_chan);
+	dma_free_writecombine(&dev->dev, SZ_64K, cb_base, cb_handle);
+	bcm_dma_chan_free(dma_chan);
 
 	bcm2708_fb_debugfs_deinit(fb);
 
-	free_irq(fb->dma_irq, fb);
+	free_irq(dma_irq, fb);
 
 	kfree(fb);
 
@@ -947,10 +1135,10 @@ static struct platform_driver bcm2708_fb_driver = {
 	.probe = bcm2708_fb_probe,
 	.remove = bcm2708_fb_remove,
 	.driver = {
-		   .name = DRIVER_NAME,
-		   .owner = THIS_MODULE,
-		   .of_match_table = bcm2708_fb_of_match_table,
-		   },
+		.name = DRIVER_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = bcm2708_fb_of_match_table,
+		},
 };
 
 static int __init bcm2708_fb_init(void)
diff --git a/include/soc/bcm2835/raspberrypi-firmware.h b/include/soc/bcm2835/raspberrypi-firmware.h
index 8ab5501c8d29..8e5c6ebc389a 100644
--- a/include/soc/bcm2835/raspberrypi-firmware.h
+++ b/include/soc/bcm2835/raspberrypi-firmware.h
@@ -111,6 +111,10 @@ enum rpi_firmware_property_tag {
 	RPI_FIRMWARE_FRAMEBUFFER_GET_PALETTE =                0x0004000b,
 	RPI_FIRMWARE_FRAMEBUFFER_GET_TOUCHBUF =               0x0004000f,
 	RPI_FIRMWARE_FRAMEBUFFER_GET_GPIOVIRTBUF =            0x00040010,
+
+	RPI_FIRMWARE_FRAMEBUFFER_GET_NUM_DISPLAYS =           0x00040012,
+	RPI_FIRMWARE_FRAMEBUFFER_GET_DISPLAY_SETTINGS =       0x00040013,
+
 	RPI_FIRMWARE_FRAMEBUFFER_RELEASE =                    0x00048001,
 	RPI_FIRMWARE_FRAMEBUFFER_TEST_PHYSICAL_WIDTH_HEIGHT = 0x00044003,
 	RPI_FIRMWARE_FRAMEBUFFER_TEST_VIRTUAL_WIDTH_HEIGHT =  0x00044004,
@@ -129,6 +133,8 @@ enum rpi_firmware_property_tag {
 	RPI_FIRMWARE_FRAMEBUFFER_SET_VIRTUAL_OFFSET =         0x00048009,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_OVERSCAN =               0x0004800a,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_PALETTE =                0x0004800b,
+	RPI_FIRMWARE_FRAMEBUFFER_SET_DISPLAY_NUM =            0x00048012,
+
 	RPI_FIRMWARE_FRAMEBUFFER_SET_TOUCHBUF =               0x0004801f,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_GPIOVIRTBUF =            0x00048020,
 	RPI_FIRMWARE_FRAMEBUFFER_SET_VSYNC =                  0x0004800e,
@@ -140,6 +146,10 @@ enum rpi_firmware_property_tag {
 	RPI_FIRMWARE_GET_DMA_CHANNELS =                       0x00060001,
 };
 
+#define GET_DISPLAY_SETTINGS_PAYLOAD_SIZE 64
+
+
+
 #if IS_ENABLED(CONFIG_RASPBERRYPI_FIRMWARE)
 int rpi_firmware_property(struct rpi_firmware *fw,
 			  u32 tag, void *data, size_t len);
-- 
2.20.1

